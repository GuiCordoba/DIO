# -*- coding: utf-8 -*-
"""Conjuntos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13oWee5HmQV3EggSrsw2RNjF2CJuF8-Ug

## **Criando sets e Acessando Dados**
Um set é uma coleção  que não possui objetos repetidos, usamos sets para representar conjuntos matematicos ou eliminar itens duplicados de um interavel
"""

# Eliminando objetos repitidos
set([1, 2, 3, 4, 3,1])
set('abacaxi')  #nesse caso, elimina letras iguais
set({'Palio', 'Gol', 'Celta', 'Palio'}) # O set tambem pode ser com colchetes {}

# Passando para lista para acessar od dados
numeros = {1, 2, 3, 2}

numeros = list(numeros)

numeros[0]

# Comando Iteração
carros = {'Gol', 'Celta', 'Palio'}

for carro in carros:
    print(carro)

# Função enumerate
carros = {'Gol', 'Celta', 'Palio'}
for indice, carro in enumerate (carros):
    print(f'{indice}:{carro}', end=' ')

"""# **Métodos de Classe Set**"""

# {}Union. Unindo dois conjuntos
conjunto_a = {1, 2}
conjunto_b = {3, 4}

conjunto_a.union(conjunto_b)

# {}Intersection. 
conjunto_a = {1, 2, 3}
conjunto_b = {2, 3, 4}

conjunto_a.intersection(conjunto_b) # {2 ,3} -> Uni a parte dos conjuntos que são iguais.

# {}Difference
conjunto_a = {1, 2, 3}
conjunto_b = {2, 3, 4}

conjunto_a.difference(conjunto_b)   # {1} -> Oque eu tenho no conjunto 'a' que não tenho no conjunto 'b'
conjunto_b.difference(conjunto_a)   # {4} -> Oque eu tenho no conjunto 'b' que não tenho no conjunto 'a'

# {}symmetric_difference.
conjunto_a = {1, 2, 3}
conjunto_b = {2, 3, 4}

conjunto_a.symmetric_difference(conjunto_b) # {1, 4} -> oque não é comum nos dois conjuntos

# {}issubset
conjunto_a = {1, 2, 3}
conjunto_b = {4, 1, 2, 5, 6, 3}

conjunto_a.issubset(conjunto_b) # True ->  os elemneto do conjunto_a pertencem ao conjunto_b
conjunto_b.issubset(conjunto_a) # False -> os elemntos do conjunto_b não pertencem a conjunto_a

# {}issuperset
conjunto_a = {1, 2, 3}
conjunto_b = {4, 1, 2, 5, 6, 3}

conjunto_a.issubset(conjunto_b) # False ->  os elemneto do conjunto_b não pertencem ao conjunto_a
conjunto_b.issubset(conjunto_a) # True -> os elemntos do conjunto_a não pertencem a conjunto_b

# {}isdisjoint
conjunto_a = {1, 2, 3, 4, 5}
conjunto_b = {6, 7, 8, 9}
conjunto_c = {1, 0}

conjunto_a.isdisjoint(conjunto_b)  # True -> os elementos do conjunto_a não pertencem ao conjunto_b
conjunto_a.isdisjoint(conjunto_c) # True -> o elementos '1' do conjunto_a pertence ao conjunto_c

#.add 
sorteio = {1, 23}

sorteio.add(25) # Adiciona o numero 24 ao set
sorteio.add(40)
sorteio.add(25) # Como o nuemero 25 ja esta no set, não sera adicionado novamente

print(sorteio)

# {}.clear. Limpa o set
sorteio = {1, 23}

sorteio.clear()

print(sorteio)

# {}.copy. Copia o set
sorteio = {1, 23}

sorteio.copy()

print(sorteio)

# {}discard. Discarta um elemento informado
numeros = {1, 2, 3, 1, 4, 5, 5, 5,  6, 7, 8, 9, 0}

numeros  # Discartou os numeros repitidos
numeros.discard(1)

print(numeros)

numeros.discard(45) # Como ja não tem o numero 45, nada acontecera

# {}.pop. Retira os elementos de um em um de forma crescente
numeros = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

numeros.pop() # Retirou o numero 0
numeros.pop() # Retirou o numro 1

print(numeros)

# {}.remove. Semelhante ao 'discard', o 'remove' discarta um elemento informado
numeros = {1, 2, 3, 1, 4, 5, 5, 5,  6, 7, 8, 9, 0}

numeros  # Discartou os numeros repitidos
numeros.remove(1)

print(numeros)

numeros.discard(45) # Como não tem o numero 45, usando o'remove', o programa vai dar um erro

# {}.len
numeros = {1, 2, 3, 1, 4, 5, 5, 5,  6, 7, 8, 9, 0}

len(numeros) # Verifica o tamanho do conjunto

# In. Verifica se um elemento pertence ao conjunto
numeros = {1, 2, 3, 1, 4, 5, 5, 5,  6, 7, 8, 9, 0}

1 in numeros  # True -> O '1' esta em 'numeros', portanto 'True'
10 in numeros # False